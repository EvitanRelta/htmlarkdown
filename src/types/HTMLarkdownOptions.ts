import type { Plugin } from './Plugin'
import type { TagName } from './Rule'
import type { UrlTransformer } from './UrlTransformer'

export interface HTMLarkdownOptions {
    /**
     * Transforms the URLs of hyperlinks & images.
     * @default null
     */
    urlTransformer: null | UrlTransformer
    /**
     * The elements to avoid collapsing whitespaces in.
     *
     * Set this to `"all"` to completely preserve whitespaces, or `[]` to
     * completely collapse whitespaces.
     * @default ["pre"]
     */
    elementsNoWhitespaceCollapse: 'all' | TagName[]
    /**
     * The types of autolinks to reverse.  \
     * Reversing autolinks removes the `<a>` tag generated by autolinking.
     *
     * @default { textUrls: true, images: true}
     */
    reverseAutolinks: {
        /**
         * Autolinks that converts URLs in texts to hyperlinks.
         *
         * eg. Markdown `"www.google.com"` is rendered as
         * ```html
         * <a href="http://www.google.com">www.google.com</a>
         * ```
         * @default true
         */
        textUrls: boolean
        /**
         * Autolinks that wraps images in an `<a>` tag with a `href` to the
         * image `src`.
         *
         * eg. Markdown `"![](https://image.src)"` is rendered as
         * ```html
         * <a href="https://image.src">
         *   <img src="https://image.src" />
         * </a>
         * ```
         * @default true
         */
        images: boolean
    }
    /**
     * Array of plugins that configures the `HTMLarkdown` instance.
     *
     * Plugins are loaded after the `HTMLarkdownOptions` are set.  \
     * Meaning, plugins may overwrite the given `HTMLarkdownOptions`.
     *
     * _(use `preloadPlugins` option instead if you don't want plugins overwriting your configs)_
     * @default []
     */
    plugins: Plugin[]
    /**
     * Similar to `plugins` option, but loads the plugins first _(with the `HTMLarkdown`
     * instance having default `HTMLarkdownOptions` values)_, before setting
     * the `HTMLarkdownOptions`.
     * @default []
     */
    preloadPlugins: Plugin[]
    /**
     * Whether to inserts a linebreak inside block-elements that are either
     * empty or end with a linebreak.
     *
     * For example, if this is set to `false`, the HTML-rendering of empty
     * paragraphs/headings might have `0` height _(as it's empty)_;  \
     * and paragraphs/headings ending with a linebreak might not render the last
     * linebreak.
     * @default false
     */
    addTrailingLinebreak: boolean
}
